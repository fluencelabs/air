use crate::parser::ast::*;
use crate::parser::into_variable_and_path;
use crate::parser::lexer::LexerError;
use crate::parser::lexer::Token;

use lalrpop_util::ErrorRecovery;
use std::rc::Rc;

// the only thing why input matters here is just introducing lifetime for Token
grammar<'err, 'input>(input: &'input str, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, LexerError>>);

pub AIR = Instr;

Instr: Box<Instruction<'input>> = {
    "(" call <p:PeerPart> <f:FPart> <args:Args> <output:Output?> ")" => {
        let output = output.unwrap_or(CallOutputValue::None);
        let args = Rc::new(args);
        Box::new(Instruction::Call(Call{peer_part: p, function_part: f, args, output}))
    },

    "(" seq <l:Instr> <r:Instr> ")" => Box::new(Instruction::Seq(Seq(l, r))),
    "(" par <l:Instr> <r:Instr> ")" => Box::new(Instruction::Par(Par(l, r))),
    "(" null ")" => Box::new(Instruction::Null(Null)),

    "(" fold <iterable:Iterable> <iterator:Alphanumeric> <i:Instr> ")" => {
        let instruction = Rc::new(*i);
        Box::new(Instruction::Fold(Fold{ iterable, iterator, instruction }))
    },
    "(" next <i:Alphanumeric> ")" => Box::new(Instruction::Next(Next(i))),


    "(" xor <l:Instr> <r:Instr> ")" => Box::new(Instruction::Xor(Xor(l, r))),

    "(" match_ <l:Matchable> <r:Matchable> <i:Instr> ")" => {
        let match_ = Match { left_value: l, right_value: r, instruction: i};
        Box::new(Instruction::Match(match_))
    },

    "(" mismatch <l:Matchable> <r:Matchable> <i:Instr> ")" => {
        let mismatch = MisMatch { left_value: l, right_value: r, instruction: i};
        Box::new(Instruction::MisMatch(mismatch))
     },

    ! => { errors.push(<>); Box::new(Instruction::Error) },
}

Args: Vec<CallArgValue<'input>> = {
    "[" <args:(<Arg>)*> "]" => args
}

FPart: FunctionPart<'input> = {
    <f:Function> => FunctionPart::FuncName(f),
    "(" <sid:ServiceId> <f:Function> ")" => FunctionPart::ServiceIdWithFuncName(sid, f),
}

PeerPart: PeerPart<'input> = {
    <pid:PeerId> => PeerPart::PeerPk(pid),
    "(" <pid:PeerId> <sid:ServiceId> ")" => PeerPart::PeerPkWithServiceId(pid, sid),
}

Output: CallOutputValue<'input> = {
    <s:Alphanumeric> => CallOutputValue::Scalar(s),
    <a:Accumulator> => CallOutputValue::Accumulator(a),
};

Function = CallArgValue;
PeerId = CallArgValue;
ServiceId = CallArgValue;
Arg = CallArgValue;

CallArgValue: CallArgValue<'input> = {
    <s:Literal> => CallArgValue::Literal(s),
    <s:Alphanumeric> => CallArgValue::Variable(s),
    <v:JsonPath> => {
        let (variable, path) = into_variable_and_path(v.0, v.1);
        CallArgValue::JsonPath { variable, path }
    },
    InitPeerId => CallArgValue::InitPeerId,
}

Iterable: IterableValue<'input> = {
    <s:Alphanumeric> => IterableValue::Variable(s),
    <v:JsonPath> => {
        let (variable, path) = into_variable_and_path(v.0, v.1);
        IterableValue::JsonPath { variable, path }
    },
}

Matchable: MatchableValue<'input> = {
    <s:Alphanumeric> => MatchableValue::Variable(s),
    <s:Literal> => MatchableValue::Literal(s),
    <v:JsonPath> => {
        let (variable, path) = into_variable_and_path(v.0, v.1);
        MatchableValue::JsonPath { variable, path }
    },
}

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'input> {
        "(" => Token::OpenRoundBracket,
        ")" => Token::CloseRoundBracket,
        "[" => Token::OpenSquareBracket,
        "]" => Token::CloseSquareBracket,

        Alphanumeric => Token::Alphanumeric(<&'input str>),
        Literal => Token::StringLiteral(<&'input str>),
        JsonPath => Token::JsonPath(<&'input str>, <usize>),
        Accumulator => Token::Accumulator(<&'input str>),

        InitPeerId => Token::InitPeerId,

        call => Token::Call,
        seq => Token::Seq,
        par => Token::Par,
        null => Token::Null,
        fold => Token::Fold,
        xor => Token::Xor,
        next => Token::Next,
        match_ => Token::Match,
        mismatch => Token::MisMatch,
    }
}
