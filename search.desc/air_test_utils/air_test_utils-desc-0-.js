searchState.loadedDescShard("air_test_utils", 0, "Describes behaviour of the AVM.\nReturn statistic of AVM server Wasm module heap footprint.\nThis errors are encountered from serialization of data …\nThe resolver for <code>ExecutedState::Ap</code>\nThe archived counterpart of <code>ExecutedState::Ap</code>\nDescribes result of applying functor <code>apply</code> to streams.\nThe resolver for an archived <code>ApResult</code>\nAn archived <code>ApResult</code>\nAn archived <code>CallResult</code>\nAn archived <code>CallServiceFailed</code>\nAn archived <code>CanonCidAggregate</code>\nAn archived <code>CanonResult</code>\nAn archived <code>CanonResultCidAggregate</code>\nAn archived <code>CidInfo</code>\nAn archived <code>CidStore</code>\nAn archived <code>ExecutedState</code>\nAn archived <code>ExecutionTrace</code>\nAn archived <code>FoldResult</code>\nAn archived <code>FoldSubTraceLore</code>\nAn archived <code>GenerationIdx</code>\nAn archived <code>InterpreterData</code>\nAn archived <code>ParResult</code>\nAn archived <code>Provenance</code>\nAn archived <code>RawValue</code>\nAn archived <code>Sender</code>\nAn archived <code>ServiceResultCidAggregate</code>\nAn archived <code>SubTraceDesc</code>\nAn archived <code>TracePos</code>\nAn archived <code>ValueRef</code>\nAn array of values of the same type.\nA byte array.\nErrors from auxiliary calls.\nBoolean.\nBoolean value.\nSpecialization of arrays for byte vector.\nSpecialization of array type for byte vector.\nThe resolver for <code>ExecutedState::Call</code>\nThe archived counterpart of <code>ExecutedState::Call</code>\nErrors encountered while trying to deserialize arguments …\nErrors encountered while trying to deserialize tetraplets …\nContains arguments of a call instruction and all other …\nThis error is encountered when deserialization pof call …\nThe resolver for an archived <code>CallResult</code>\nErrors encountered while trying to serialize call results.\nThis errors are encountered from an call results/params …\nThe resolver for an archived <code>CallServiceFailed</code>\nRepresents an executed host function result.\nThe resolver for <code>Provenance::Canon</code>\nThe archived counterpart of <code>Provenance::Canon</code>\nThe resolver for <code>ExecutedState::Canon</code>\nThe archived counterpart of <code>ExecutedState::Canon</code>\nThe type Canon trace CID refers to.\nThe resolver for an archived <code>CanonCidAggregate</code>\nContains ids of element that were on a stream at the …\nThe resolver for an archived <code>CanonResultCidAggregate</code>\nThe resolver for an archived <code>CanonResult</code>\nThe resolver for an archived <code>CidInfo</code>\nStores CID to Value corresponance.\nThe resolver for an archived <code>CidStore</code>\nThis trait is used for\nThis errors are encountered from a data store object.\nContains the error value\nContains the error value\nThe resolver for <code>CallResult::Executed</code>\nThe archived counterpart of <code>CallResult::Executed</code>\nA corresponding call’s been already executed with such …\nThe resolver for <code>CanonResult::Executed</code>\nThe archived counterpart of <code>CanonResult::Executed</code>\nThe resolver for an archived <code>ExecutedState</code>\nThe resolver for an archived <code>ExecutionTrace</code>\nA 32-bits float.\nA 32-bits float.\nA 64-bits float.\nA 64-bits float.\nThe resolver for <code>CallResult::Failed</code>\nThe archived counterpart of <code>CallResult::Failed</code>\nThe call returned a service error.\nThe resolver for <code>ExecutedState::Fold</code>\nThe archived counterpart of <code>ExecutedState::Fold</code>\nThis type represents all information in an execution trace …\nThe resolver for an archived <code>FoldResult</code>\nLet’s consider an example of trace that could be …\nThe resolver for an archived <code>FoldSubTraceLore</code>\nThe resolver for an archived <code>GenerationIdx</code>\nA 32-bits integer (as defined in WebAssembly core).\nA 32-bits integer (as defined in WebAssembly core).\nA 64-bits integer (as defined in WebAssembly core).\nA 64-bits integer (as defined in WebAssembly core).\nRepresents the types supported by WIT.\nA WIT value.\nMarine call returns Vec to support multi-value in a future,\nThe AIR interpreter could be considered as a function …\nAn envelope for the AIR interpreter data that makes AIR …\nThe resolver for an archived <code>InterpreterData</code>\nThis error contains interpreter outcome in case when …\nAIR interpreter result deserialization errors.\nSpecified path to AIR interpreter .wasm file was invalid\nInvalid secret key.\nThe resolver for <code>Provenance::Literal</code>\nThe archived counterpart of <code>Provenance::Literal</code>\nThis errors are encountered from FaaS.\nAn error occurred when host functions tries to lift …\nAn error occurred when a host functions tries to lift …\nContains the success value\nContains the success value\nThe resolver for <code>ExecutedState::Par</code>\nThe archived counterpart of <code>ExecutedState::Par</code>\nThe resolver for an archived <code>ParResult</code>\nRepresents parameters obtained from a particle.\nThe resolver for <code>Sender::PeerId</code>\nThe archived counterpart of <code>Sender::PeerId</code>\nThe resolver for <code>Sender::PeerIdWithCallId</code>\nThe archived counterpart of <code>Sender::PeerIdWithCallId</code>\nThe resolver for an archived <code>Provenance</code>\nThis struct is very similar to AVMOutcome, but keeps …\nThe resolver for an archived <code>RawValue</code>\nA record contains record index from interfaces AST.\nA record.\nThe resolver for <code>CallResult::RequestSentBy</code>\nThe archived counterpart of <code>CallResult::RequestSentBy</code>\nRequest was sent to a target node by node with such public …\nThe resolver for <code>CanonResult::RequestSentBy</code>\nThe archived counterpart of <code>CanonResult::RequestSentBy</code>\nRequest was sent to a target node by node with such public …\nThis errors are encountered from an AVM runner.\nA 16-bits signed integer.\nA 16-bits signed integer.\nA 32-bits signed integer.\nA 32-bits signed integer.\nA 64-bits signed integer.\nA 64-bits signed integer.\nA 8-bits signed integer.\nA 8-bits signed integer.\nThe resolver for <code>ValueRef::Scalar</code>\nThe archived counterpart of <code>ValueRef::Scalar</code>\nThe call value is stored to a scalar variable.\nDescribes an origin that set corresponding value.\nThe resolver for an archived <code>Sender</code>\nThe resolver for <code>Provenance::ServiceResult</code>\nThe archived counterpart of <code>Provenance::ServiceResult</code>\nA proof of service result execution result.\nThe resolver for an archived <code>ServiceResultCidAggregate</code>\nThis stores soft limits triggering flags.\nThe resolver for <code>ValueRef::Stream</code>\nThe archived counterpart of <code>ValueRef::Stream</code>\nThe call value is stored to a stream variable.\nA string.\nA string.\nDescriptor of a subtrace inside execution trace.\nThe resolver for an archived <code>SubTraceDesc</code>\nThe resolver for an archived <code>TracePos</code>\nA 16-bits unsigned integer.\nA 16-bits unsigned integer.\nA 32-bits unsigned integer.\nA 32-bits unsigned integer.\nA 64-bits unsigned integer.\nA 64-bits unsigned integer.\nA 8-bits unsigned integer.\nA 8-bits unsigned integer.\nThe resolver for <code>ValueRef::Unused</code>\nThe archived counterpart of <code>ValueRef::Unused</code>\nThe call value is not stored.\nThe resolver for an archived <code>ValueRef</code>\nPath to a AIR interpreter Wasm file.\nNumber of allocations rejected due to memory limit. May be …\nThe archived counterpart of …\nHash of the call arguments.\nType of the closure arguments.\nArguments that should be passed to the function.\nThe archived counterpart of <code>SubTraceDesc::begin_pos</code>\nStart position in a trace of this subtrace.\nCollected parameters of all met call instructions that …\nThis is the limit for the size of service call result.\nThis is the limit for the size of service call result.\nThe archived counterpart of <code>CidInfo::canon_element_store</code>\nMap CID to a canon element value.\nThe archived counterpart of <code>CidInfo::canon_result_store</code>\nMap CID to a canon result.\nThe archived counterpart of <code>InterpreterData::cid_info</code>\nCID-to-somethings mappings.\nCleanup data that become obsolete.\nCleanup data that become obsolete.\nContains script data that should be preserved in an …\nVersion of this data format.\nReturns true if an anomaly happened and it’s necessary …\nIf Some, this closure is called with error when errors is …\nTime of a particle execution (it counts only execution …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName of a function from service identified by service_id …\nName of a function that returned corresponding value.\nThis knob controls hard RAM limits behavior for AVMRunner.\nThis knob controls hard RAM limits behavior for AVMRunner.\nThis closure will be invoked for corresponding import.\nVersion of an interpreter produced this data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nLast exposed to a peer call request id. All next call …\nThe archived counterpart of <code>ParResult::left_size</code>\nValue was produced by applying this <code>lens</code> to the output …\nCreate a tetraplet for string literals defined in the …\nMask used to filter logs, for details see <code>log_utf8_string</code> …\nThe archived counterpart of <code>FoldResult::lore</code>\nMaximum heap size in bytes available for the interpreter.\nMemory in bytes AVM linear heap was extended during …\nSize of currently used linear memory in bytes. Please note …\nReturn memory stat of an interpreter heap.\nThe archived counterpart of <code>CallServiceFailed::message</code>\nThis field contains a JSON-serialized value, not a plain …\nCreate AVM with provided config.\nPublic keys of peers that should receive data.\nTypes of output of the closure.\nThe particle data size limit.\nThe particle data size limit.\nId of a peer where corresponding value was set.\nThe archived counterpart of <code>CanonCidAggregate::provenance</code>\nThe archived counterpart of <code>ApResult::res_generations</code>\nResulted JValue returned by a service string.\nA error code service or builtin returned, where …\nThe archived counterpart of <code>CallServiceFailed::ret_code</code>\nThe archived counterpart of <code>ParResult::right_size</code>\nId of a service that should be called.\nId of a service that set corresponding value.\nThe archived counterpart of <code>CidInfo::service_result_store</code>\nMap CID to a service result aggregate.\nThe archived counterpart of <code>InterpreterData::signatures</code>\nSignature store.\nReturns a size of subtrace that this par describes in …\nTo store and convey soft limits triggering flags.\nThe archived counterpart of <code>SubTraceDesc::subtrace_len</code>\nLength of the subtrace.\nThe archived counterpart of …\nDescriptors of a subtrace that are corresponded to the …\nThe archived counterpart of …\nThe archived counterpart of <code>CanonCidAggregate::tetraplet</code>\nThe archived counterpart of …\nThe tetraplet of the call result.\nThe archived counterpart of <code>CidInfo::tetraplet_store</code>\nMap CID to a tetraplet.\nTetraplets that should be passed to the service.\nPossibly set max memory size for AVM server.\nThe archived counterpart of <code>InterpreterData::trace</code>\nTrace of AIR execution, which contains executed call, par, …\nTries to de InterpreterData from slice according to the …\nPlease note that <code>unused_tracked</code> does not exist as unused …\nThe archived counterpart of <code>CanonCidAggregate::value</code>\nThe archived counterpart of …\nThe archived counterpart of <code>FoldSubTraceLore::value_pos</code>\nPosition of current value in a trace.\nThe archived counterpart of <code>CidInfo::value_store</code>\nMap CID to value.\nThe archived counterpart of <code>CanonResultCidAggregate::values</code>\nVersions of data and an interpreter produced this data.\nThe archived counterpart of <code>Provenance::ServiceResult::cid</code>\nThe archived counterpart of <code>Provenance::Canon::cid</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>ValueRef::Stream::cid</code>\nThe archived counterpart of <code>ValueRef::Stream::generation</code>\nThe resolver for <code>Provenance::ServiceResult::cid</code>\nThe resolver for <code>Provenance::Canon::cid</code>\nThe resolver for <code>Sender::PeerIdWithCallId::call_id</code>\nThe resolver for <code>Sender::PeerIdWithCallId::peer_id</code>\nThe resolver for <code>ValueRef::Stream::cid</code>\nThe resolver for <code>ValueRef::Stream::generation</code>\nThis struct is very similar to AVMOutcome, but keeps …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate AVM with the provided config.\nManages which source will be used to choose a variable.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function takes a JSON DSL-like struct for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive fake keypair for testing proposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>NEVec&lt;T&gt;</code> represents a non-empty <code>Vec&lt;T&gt;</code>. It derefs to <code>Vec&lt;T&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts this NEVec into Vec\nCreates a new non-empty vector, based on an inner <code>Vec&lt;T&gt;</code>. …\nRepresents a JSON array.\nRepresents a JSON boolean.\nRepresents any valid JSON value with a cheap to clone …\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nIf the <code>JValue</code> is an Array, returns the associated vector. …\nIf the <code>JValue</code> is a Boolean, returns the associated bool. …\nIf the <code>JValue</code> is a number, represent it as f64 if …\nIf the <code>JValue</code> is an integer, represent it as i64 if …\nIf the <code>JValue</code> is a Null, returns (). Returns None …\nIf the <code>JValue</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>JValue</code> is an Object, returns the associated Map. …\nIf the <code>JValue</code> is a string, returns the associated str. …\nIf the <code>JValue</code> is an integer, represent it as u64 if …\nDisplay a JSON value as a string.\nConvert map (with string keys) to <code>JValue::Object</code>.\nConvert a <code>Vec</code> to <code>JValue::Array</code>.\nConvert string slice to <code>JValue::String</code>.\nConvert 32-bit floating point number to <code>JValue::Number</code>, or …\nConvert 64-bit floating point number to <code>JValue::Number</code>, or …\nConvert a slice to <code>JValue::Array</code>.\nConvert <code>JsonString</code> to <code>JValue::String</code>.\nConvert copy-on-write string to <code>JValue::String</code>.\nConvert map (with string keys) to <code>JValue::Object</code>.\nConvert boolean to <code>JValue::Bool</code>.\nConvert <code>()</code> to <code>JValue::Null</code>.\nReturns the argument unchanged.\nConvert <code>serde_json::Number</code> to <code>JValue::Number</code>.\nConvert <code>String</code> to <code>JValue::String</code>.\nCreate a <code>JValue::Object</code> by collecting an iterator of …\nCreate a <code>JValue::Array</code> by collecting an iterator of array …\nIndex into a JSON array or map. A string index can be used …\nIndex into a <code>air_interpreter_value::JValue</code> using the …\nCalls <code>U::from(self)</code>.\nReturns true if the <code>JValue</code> is an Array. Returns false …\nReturns true if the <code>JValue</code> is a Boolean. Returns false …\nReturns true if the <code>JValue</code> is a number that can be …\nReturns true if the <code>JValue</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>JValue</code> is a Null. Returns false …\nReturns true if the <code>JValue</code> is a Number. Returns false …\nReturns true if the <code>JValue</code> is an Object. Returns false …\nReturns true if the <code>JValue</code> is a String. Returns false …\nReturns true if the <code>JValue</code> is an integer between zero and …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nLooks up a value by a JSON Pointer.\nTakes the value out of the <code>JValue</code>, leaving a <code>Null</code> in its …\nThis struct is very similar to AVMOutcome, but keeps …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis struct is used to set limits for the test runner …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn util for verificating particular data’s signatures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each peer, merge previous and current CID multisets by …\nVerify each peers’ signatures.\nWASM runner that runs release build form benchmarking.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")