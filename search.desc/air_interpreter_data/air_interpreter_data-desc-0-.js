searchState.loadedDescShard("air_interpreter_data", 0, "The resolver for <code>ExecutedState::Ap</code>\nThe archived counterpart of <code>ExecutedState::Ap</code>\nDescribes result of applying functor <code>apply</code> to streams.\nThe resolver for an archived <code>ApResult</code>\nAn archived <code>ApResult</code>\nAn archived <code>CallResult</code>\nAn archived <code>CallServiceFailed</code>\nAn archived <code>CanonCidAggregate</code>\nAn archived <code>CanonResult</code>\nAn archived <code>CanonResultCidAggregate</code>\nAn archived <code>CidInfo</code>\nAn archived <code>CidStore</code>\nAn archived <code>ExecutedState</code>\nAn archived <code>ExecutionTrace</code>\nAn archived <code>FoldResult</code>\nAn archived <code>FoldSubTraceLore</code>\nAn archived <code>GenerationIdx</code>\nAn archived <code>InterpreterData</code>\nAn archived <code>ParResult</code>\nAn archived <code>Provenance</code>\nAn archived <code>RawValue</code>\nAn archived <code>Sender</code>\nAn archived <code>ServiceResultCidAggregate</code>\nAn archived <code>SubTraceDesc</code>\nAn archived <code>TracePos</code>\nAn archived <code>ValueRef</code>\nThe resolver for <code>ExecutedState::Call</code>\nThe archived counterpart of <code>ExecutedState::Call</code>\nThe resolver for an archived <code>CallResult</code>\nThe resolver for an archived <code>CallServiceFailed</code>\nThe resolver for <code>Provenance::Canon</code>\nThe archived counterpart of <code>Provenance::Canon</code>\nThe resolver for <code>ExecutedState::Canon</code>\nThe archived counterpart of <code>ExecutedState::Canon</code>\nThe type Canon trace CID refers to.\nThe resolver for an archived <code>CanonCidAggregate</code>\nContains ids of element that were on a stream at the …\nThe resolver for an archived <code>CanonResultCidAggregate</code>\nThe resolver for an archived <code>CanonResult</code>\nThe resolver for an archived <code>CidInfo</code>\nStores CID to Value corresponance.\nThe resolver for an archived <code>CidStore</code>\nThe resolver for <code>CallResult::Executed</code>\nThe archived counterpart of <code>CallResult::Executed</code>\nA corresponding call’s been already executed with such …\nThe resolver for <code>CanonResult::Executed</code>\nThe archived counterpart of <code>CanonResult::Executed</code>\nThe resolver for an archived <code>ExecutedState</code>\nThe resolver for an archived <code>ExecutionTrace</code>\nThe resolver for <code>CallResult::Failed</code>\nThe archived counterpart of <code>CallResult::Failed</code>\nThe call returned a service error.\nThe resolver for <code>ExecutedState::Fold</code>\nThe archived counterpart of <code>ExecutedState::Fold</code>\nThis type represents all information in an execution trace …\nThe resolver for an archived <code>FoldResult</code>\nLet’s consider an example of trace that could be …\nThe resolver for an archived <code>FoldSubTraceLore</code>\nThe resolver for an archived <code>GenerationIdx</code>\nThe AIR interpreter could be considered as a function …\nAn envelope for the AIR interpreter data that makes AIR …\nThe resolver for an archived <code>InterpreterData</code>\nThe resolver for <code>Provenance::Literal</code>\nThe archived counterpart of <code>Provenance::Literal</code>\nThe resolver for <code>ExecutedState::Par</code>\nThe archived counterpart of <code>ExecutedState::Par</code>\nThe resolver for an archived <code>ParResult</code>\nThe resolver for <code>Sender::PeerId</code>\nThe archived counterpart of <code>Sender::PeerId</code>\nThe resolver for <code>Sender::PeerIdWithCallId</code>\nThe archived counterpart of <code>Sender::PeerIdWithCallId</code>\nThe resolver for an archived <code>Provenance</code>\nThe resolver for an archived <code>RawValue</code>\nThe resolver for <code>CallResult::RequestSentBy</code>\nThe archived counterpart of <code>CallResult::RequestSentBy</code>\nRequest was sent to a target node by node with such public …\nThe resolver for <code>CanonResult::RequestSentBy</code>\nThe archived counterpart of <code>CanonResult::RequestSentBy</code>\nRequest was sent to a target node by node with such public …\nThe resolver for <code>ValueRef::Scalar</code>\nThe archived counterpart of <code>ValueRef::Scalar</code>\nThe call value is stored to a scalar variable.\nThe resolver for an archived <code>Sender</code>\nThe resolver for <code>Provenance::ServiceResult</code>\nThe archived counterpart of <code>Provenance::ServiceResult</code>\nA proof of service result execution result.\nThe resolver for an archived <code>ServiceResultCidAggregate</code>\nThe resolver for <code>ValueRef::Stream</code>\nThe archived counterpart of <code>ValueRef::Stream</code>\nThe call value is stored to a stream variable.\nDescriptor of a subtrace inside execution trace.\nThe resolver for an archived <code>SubTraceDesc</code>\nThe resolver for an archived <code>TracePos</code>\nThe resolver for <code>ValueRef::Unused</code>\nThe archived counterpart of <code>ValueRef::Unused</code>\nThe call value is not stored.\nThe resolver for an archived <code>ValueRef</code>\nThe archived counterpart of …\nHash of the call arguments.\nThe archived counterpart of <code>SubTraceDesc::begin_pos</code>\nStart position in a trace of this subtrace.\nThe archived counterpart of <code>CidInfo::canon_element_store</code>\nMap CID to a canon element value.\nThe archived counterpart of <code>CidInfo::canon_result_store</code>\nMap CID to a canon result.\nThe archived counterpart of <code>InterpreterData::cid_info</code>\nCID-to-somethings mappings.\nVersion of this data format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVersion of an interpreter produced this data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nLast exposed to a peer call request id. All next call …\nThe archived counterpart of <code>ParResult::left_size</code>\nThe archived counterpart of <code>FoldResult::lore</code>\nThe archived counterpart of <code>CallServiceFailed::message</code>\nThis field contains a JSON-serialized value, not a plain …\nThe archived counterpart of <code>CanonCidAggregate::provenance</code>\nThe archived counterpart of <code>ApResult::res_generations</code>\nThe archived counterpart of <code>CallServiceFailed::ret_code</code>\nThe archived counterpart of <code>ParResult::right_size</code>\nThe archived counterpart of <code>CidInfo::service_result_store</code>\nMap CID to a service result aggregate.\nThe archived counterpart of <code>InterpreterData::signatures</code>\nSignature store.\nReturns a size of subtrace that this par describes in …\nThe archived counterpart of <code>SubTraceDesc::subtrace_len</code>\nLength of the subtrace.\nThe archived counterpart of …\nDescriptors of a subtrace that are corresponded to the …\nThe archived counterpart of …\nThe archived counterpart of <code>CanonCidAggregate::tetraplet</code>\nThe archived counterpart of …\nThe tetraplet of the call result.\nThe archived counterpart of <code>CidInfo::tetraplet_store</code>\nMap CID to a tetraplet.\nThe archived counterpart of <code>InterpreterData::trace</code>\nTrace of AIR execution, which contains executed call, par, …\nTries to de InterpreterData from slice according to the …\nThe archived counterpart of <code>CanonCidAggregate::value</code>\nThe archived counterpart of …\nThe archived counterpart of <code>FoldSubTraceLore::value_pos</code>\nPosition of current value in a trace.\nThe archived counterpart of <code>CidInfo::value_store</code>\nMap CID to value.\nThe archived counterpart of <code>CanonResultCidAggregate::values</code>\nVersions of data and an interpreter produced this data.\nThe archived counterpart of <code>Provenance::ServiceResult::cid</code>\nThe archived counterpart of <code>Provenance::Canon::cid</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>ValueRef::Stream::cid</code>\nThe archived counterpart of <code>ValueRef::Stream::generation</code>\nThe resolver for <code>Provenance::ServiceResult::cid</code>\nThe resolver for <code>Provenance::Canon::cid</code>\nThe resolver for <code>Sender::PeerIdWithCallId::call_id</code>\nThe resolver for <code>Sender::PeerIdWithCallId::peer_id</code>\nThe resolver for <code>ValueRef::Stream::cid</code>\nThe resolver for <code>ValueRef::Stream::generation</code>\nAn util for verificating particular data’s signatures.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each peer, merge previous and current CID multisets by …\nVerify each peers’ signatures.")