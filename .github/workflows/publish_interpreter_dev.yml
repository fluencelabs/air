# run locally like this:
# act -b -P ubuntu-latest=nektos/act-environments-ubuntu:18.04 -j publish-interpreter-branch -s "NPM_TOKEN=uuid-uuid-uuid-uuid"

name: "publish-interpreter-branch"

on:
  push:
    branches-ignore:
      - "master"

env:
  CARGO_HOME: "./cargo"

jobs:
  npm-publish-dev:
    name: "Publish AIR interpreter .wasm to NPM & crates.io"
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        id: extract_branch

      - name: Extract branch name
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - run: cargo update --aggressive

      - name: Install jq & sponge
        run: sudo apt-get update && sudo apt-get --yes --force-yes install jq moreutils

      - name: Install cargo-show & toml-cli
        run: cargo install cargo-show toml-cli

      - name: Get versions from npm & crates.io, and take the highest one
        run: |
          set -x
          # install semver and add it to PATH
          yarn global add semver
          PATH="$(yarn global bin):$PATH"

          INTERPRETER_CARGO_TOML="air-interpreter/Cargo.toml"
          CARGO_TOML="crates/interpreter-wasm/Cargo.toml"
          PACKAGE_JSON="avm/client/package.json"

          # sanitize branch name so it can be used as a semver suffix (replace [^0-9a-zA-Z-] with hyphen)
          SANITIZED_BRANCH="$(echo -n "${{ env.BRANCH_NAME }}" | tr -C '[:alnum:]-' -)"
          # JQ Version regex pattern
          PAT="\\\\d+.\\\\d+.\\\\d+-$SANITIZED_BRANCH.\\\\d+"

          # get package name from Cargo.toml
          PKG_NAME="$(toml get "$CARGO_TOML" package.name | tr -d \")"

          # get package name from package.json
          JS_PKG_NAME="$(cat "$PACKAGE_JSON" | jq -r .name)"

          ### NPM
          # take all versions from npm and replace single quotes with double quotes
          NPM_VERSIONS=$(yarn info --silent "$JS_PKG_NAME" versions 2>/dev/null | tr \' \")
          # take only versions that contain branch name
          NPM_VERSIONS_FILTERED=$(echo $NPM_VERSIONS | jq -r ".[] | select(test(\"$PAT\"))")
          # flatten into a single line
          NPM_VERSIONS_FLATTENED=$(echo $NPM_VERSIONS_FILTERED | awk '{print}' ORS=' ')
          # sort versions according to semver, take highest (last)
          LAST_NPM_VERSION="$(semver -p $(echo $NPM_VERSIONS_FLATTENED) | tail -n1 || true)"
          # increment prerelease part of the version
          PRERELEASE_NPM_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${LAST_NPM_VERSION}" || true)"

          ### CRATES.IO
          CRATE_VERSIONS=$(cargo show --json "$PKG_NAME")
          CRATE_VERSIONS_FILTERED=$(echo $CRATE_VERSIONS | jq -r ".versions[] | .num | select(test(\"$PAT\"))")
          CRATE_VERSIONS_FLATTENED=$(echo $CRATE_VERSIONS_FILTERED | awk '{print}' ORS=' ')
          LAST_CRATE_VERSION="$(semver -p $(echo $CRATE_VERSIONS_FLATTENED) | tail -n1 || true)"
          PRERELEASE_CRATE_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${LAST_CRATE_VERSION}" || true)"

          ### LOCAL
          ### (NOTE: the following code assumes that local versions do not contain prerelease suffix; existing suffix will be ignored)
          # take local Rust version
          LOCAL_RUST_VERSION="$(toml get "$CARGO_TOML" package.version | tr -d \")"
          INTERPRETER_RUST_VERSION="$(toml get "$INTERPRETER_CARGO_TOML" package.version | tr -d \")"
          MAX_RUST_VERSION="$(semver "$LOCAL_RUST_VERSION" "$INTERPRETER_RUST_VERSION" | tail -n1)"
          LOCAL_RUST_PRERELEASE_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${MAX_RUST_VERSION}-0")" # added '-0' here to avoid semver erroneously increment patch octet. Any suffix works, '-0' is chosen deliberately.

          ### SAVE FINAL VERSION TO ENV
          # take the highest version
          MAX_VERSION="$(semver "$LOCAL_RUST_PRERELEASE_VERSION" "$PRERELEASE_NPM_VERSION" "$PRERELEASE_CRATE_VERSION" | tail -n1)"
          # save info to env
          echo "FINAL_VERSION=$MAX_VERSION" | tee -a $GITHUB_ENV
          echo "PKG_NAME=$PKG_NAME" | tee -a $GITHUB_ENV
          echo "JS_PKG_NAME=$JS_PKG_NAME" | tee -a $GITHUB_ENV

      - name: Install marine
        run: cargo install marine

      - name: Set interpreter version to ${{ env.FINAL_VERSION }} before the build
        run: |
          (
            cd air-interpreter
            toml set Cargo.toml package.version "${{ env.FINAL_VERSION }}" | sponge Cargo.toml
          )
          (
            cd air
            toml set Cargo.toml package.version "${{ env.FINAL_VERSION }}" | sponge Cargo.toml
          )

      - name: Build air_interpreter_server.wasm for node
        run: marine build -p air-interpreter --release --features marine
        working-directory: air-interpreter

      - name: Copy air_interpreter_server.wasm to interpreter-wasm
        run: cp target/wasm32-wasi/release/air_interpreter_server.wasm crates/interpreter-wasm/air_interpreter_server.wasm

      - name: Set project name@version to ${{ env.PKG_NAME }}@${{ env.FINAL_VERSION }}
        run: |
          toml set Cargo.toml package.version "${{ env.FINAL_VERSION }}" | sponge Cargo.toml

          NAME=$(toml get Cargo.toml package.name | jq -r .)
          toml set Cargo.toml package.name "${{ env.PKG_NAME }}" | sponge Cargo.toml
        working-directory: crates/interpreter-wasm

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --allow-dirty
        working-directory: crates/interpreter-wasm

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        continue-on-error: true

      - name: Build npm package
        working-directory: avm/client
        run: |
          ./build_wasm.sh
          npm i
          npm run build

      - name: Set version to ${{ env.FINAL_VERSION }}
        run: yarn version --new-version ${{ env.FINAL_VERSION }} --no-git-tag-version || true
        working-directory: avm/client

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "14"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to npm registry
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --tag=beta
        working-directory: avm/client
