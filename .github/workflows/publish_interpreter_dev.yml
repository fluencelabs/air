# run locally like this:
# act -b -P ubuntu-latest=nektos/act-environments-ubuntu:18.04 -j publish-interpreter-branch -s "NPM_TOKEN=uuid-uuid-uuid-uuid"

name: "publish-interpreter-branch"

on:
  push:
    branches-ignore:
      - master

jobs:
  npm-publish-dev:
    name: "Publish AIR interpreter .wasm to NPM & crates.io"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    ### Extract branch name
      - name: Extract branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        id: extract_branch

      - name: Extract branch name
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

### Prepare cargo & toolchains
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-1-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain with wasm32-unknown-unknown
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - name: Install wasm32-wasi
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi
          profile: minimal
      - uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: update
          args: --aggressive

### Calculate FINAL_VERSION
      - name: Install jq & sponge
        run: sudo apt-get update && sudo apt-get --yes --force-yes install jq moreutils

      - name: Install cargo-show & toml-cli
        run: cargo install cargo-show toml-cli || true

      - name: Get versions from npm & crates.io, and take the highest one
        run: |
          # install semver and add it to PATH
          yarn global add semver
          PATH="$(yarn global bin):$PATH"

          set -x

          CARGO_TOML="crates/air-interpreter-wasm/Cargo.toml"

          # sanitize branch name so it can be used as a semver suffix (replace [^0-9a-zA-Z-] with hyphen)
          SANITIZED_BRANCH="$(echo -n "${{ env.BRANCH_NAME }}" | tr -C '[:alnum:]-' -)"

          # get package name from Cargo.toml
          PKG_NAME="$(toml get "$CARGO_TOML" package.name | tr -d \")"
          JS_PKG_NAME="@fluencelabs/aquamarine-stepper"

          ### NPM
          # take all versions from npm and replace single quotes with double quotes
          NPM_VERSIONS=$(yarn info --silent "$JS_PKG_NAME" versions 2>/dev/null | tr \' \")
          # take only versions that contain branch name
          NPM_VERSIONS_FILTERED=$(echo $NPM_VERSIONS | jq -r ".[] | select(contains(\"$SANITIZED_BRANCH\"))")
          # flatten into a single line
          NPM_VERSIONS_FLATTENED=$(echo $NPM_VERSIONS_FILTERED | awk '{print}' ORS=' ')
          # sort versions according to semver, take highest (last)
          LAST_NPM_VERSION="$(semver -p $(echo $NPM_VERSIONS_FLATTENED) | tail -n1 || true)"
          # increment prerelease part of the version
          PRERELEASE_NPM_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${LAST_NPM_VERSION}" || true)"

          ### CRATES.IO
          CRATE_VERSIONS=$(cargo show --json "$PKG_NAME")
          CRATE_VERSIONS_FILTERED=$(echo $CRATE_VERSIONS | jq -r ".versions[] | .num | select(contains(\"$SANITIZED_BRANCH\"))")
          CRATE_VERSIONS_FLATTENED=$(echo $CRATE_VERSIONS_FILTERED | awk '{print}' ORS=' ')
          LAST_CRATE_VERSION="$(semver -p $(echo $CRATE_VERSIONS_FLATTENED) | tail -n1 || true)"
          PRERELEASE_CRATE_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${LAST_CRATE_VERSION}" || true)"

          ### LOCAL
          ### (NOTE: the following code assumes that local versions do not contain prerelease suffix; existing suffix will be ignored)
          # take local Rust version
          LOCAL_RUST_VERSION="$(toml get "$CARGO_TOML" package.version | tr -d \")"
          LOCAL_RUST_PRERELEASE_VERSION="$(semver --increment prerelease --preid "$SANITIZED_BRANCH" "${LOCAL_RUST_VERSION}-0")" # added '-0' here to avoid semver erroneously increment patch octet. Any suffix works, '-0' is chosen deliberately.

          ### SAVE FINAL VERSION TO ENV
          # take the highest version
          MAX_VERSION="$(semver "$LOCAL_RUST_PRERELEASE_VERSION" "$PRERELEASE_NPM_VERSION" "$PRERELEASE_CRATE_VERSION" | tail -n1)"
          # save info to env
          echo "FINAL_VERSION=$MAX_VERSION" | tee -a $GITHUB_ENV
          echo "PKG_NAME=$PKG_NAME" | tee -a $GITHUB_ENV
          echo "JS_PKG_NAME=$JS_PKG_NAME" | tee -a $GITHUB_ENV

### === JavaScript package release ===
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        continue-on-error: true

      - name: Build aquamarine.wasm for JS clients
        run: wasm-pack build $GITHUB_WORKSPACE/stepper --no-typescript --release -d $(pwd)/pkg

      - name: Generate aquamarine.wasm.base64.js
        run: |
          cat << EOF > pkg/aquamarine.wasm.base64.js
          export const wasmBs64 = "$(base64 -w0 pkg/aquamarine_client_bg.wasm)";
          EOF

    ### Generate index files so import works as: | import {wasmBs64} from "@fluencelabs/aquamarine-stepper"; |
      - name: Generate index.js & index.d.ts
        run: |
          cat << EOF > index.js
          export * from "./aquamarine.wasm.base64.js";
          EOF

          cp index.js index.d.ts
        working-directory: pkg

      - name: Generate aquamarine.wasm.base64.d.ts
        run: |
          cat << EOF > aquamarine.wasm.base64.d.ts
          export const wasmBs64: string;
          EOF
        working-directory: pkg

      - name: Prepare package.json for publishing of ${{ env.JS_PKG_NAME }} @ ${{ env.FINAL_VERSION }}
        run: |
          cat pkg/package.json | jq --arg name aquamarine.wasm.base64.js \
            '. + {
              files: [ "aquamarine.wasm.base64.js", "aquamarine.wasm.base64.d.ts",  "index.js", "index.d.ts" ],
              "name": "${{ env.JS_PKG_NAME }}",
              "description": "Aquamarine IR interpreter as base64 WASM",
              "main": "index.js",
              "repository": "https://github.com/fluencelabs/aquamarine",
              "author": "Fluence Labs",
              "license": "Apache 2.0",
              "private": false,
              "main": "index.js",
              "types": "index.d.ts"
            }' > pkg/package_new.json

          cat pkg/package_new.json
          mv pkg/package_new.json pkg/package.json

      - run: cat pkg/package.json

    ### Set version to FINAL_VERSION
      - run: yarn version --new-version ${{ env.FINAL_VERSION }} --no-git-tag-version || true
        working-directory: pkg

      ### Add README so it appears on npmjs.org
      - run: |
          cat <<EOF > README.md
          # Aquamarine IR interpreter as base64 WASM
          Built from branch ${{ env.BRANCH_NAME }}
          EOF
        working-directory: pkg

    ### Publish to NPM registry
      - uses: actions/setup-node@v1
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish --access public
        working-directory: pkg
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


### === Rust package release ===
      - name: Install fcli
        run: cargo install fcli || true

      - name: Build aquamarine.wasm for node
        run: fce build -p aquamarine --release --features fce
        working-directory: stepper

      - name: Copy aquamarine.wasm to air-interpreter-wasm
        run: cp target/wasm32-wasi/release/aquamarine.wasm crates/air-interpreter-wasm/aquamarine.wasm

      - name: Set project name@version to ${{ env.PKG_NAME }}@${{ env.FINAL_VERSION }}
        run: |
          PATH="~/.cargo/bin:$PATH"
          toml set Cargo.toml package.version "${{ env.FINAL_VERSION }}" | sponge Cargo.toml

          NAME=$(toml get Cargo.toml package.name | jq -r .)
          toml set Cargo.toml package.name "${{ env.PKG_NAME }}" | sponge Cargo.toml
        working-directory: crates/air-interpreter-wasm

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --allow-dirty
        working-directory: crates/air-interpreter-wasm
