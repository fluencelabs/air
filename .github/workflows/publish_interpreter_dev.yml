# run locally like this:
# act -b -P ubuntu-latest=nektos/act-environments-ubuntu:18.04 -j publish-interpreter-branch -s "NPM_TOKEN=uuid-uuid-uuid-uuid"

name: "publish-interpreter-branch"

on:
  push:
    branches-ignore:
      - master

jobs:
  npm-publish-dev:
    name: "Publish AIR interpreter .wasm to NPM & crates.io"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    ### Extract branch name
      - name: Extract branch name
        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        id: extract_branch

      - name: Extract branch name
        if: github.event_name == 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get --yes --force-yes install jq

      - name: Install cargo-show, cargo-release & fce-cli
        run: cargo install cargo-show cargo-release fce-cli

      - name: Get versions from npm & crates.io, and take the highest one
        run: |
          yarn global add semver
          PATH="$(yarn global bin):$PATH"
          JS_VERSION="$(yarn info --silent @fluencelabs/aquamarine-stepper-${{ env.BRANCH_NAME }} version || true)"
          RS_VERSION="$((cargo show --json air-interpreter-wasm-${{ env.BRANCH_NAME }} | jq -r .crate.max_version) 2>/dev/null || true)"
          MAX_VERSION="$(semver "$JS_VERSION" "$RS_VERSION" "0.0.0" | tail -n1)"
          echo "MAX_VERSION=$MAX_VERSION" | tee -a $GITHUB_ENV

### === JavaScript package release ===
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build aquamarine.wasm for JS clients
        run: wasm-pack build $GITHUB_WORKSPACE/stepper --no-typescript --release -d $(pwd)/pkg

      - name: Generate aquamarine.wasm.base64.js
        run: |
          cat << EOF > pkg/aquamarine.wasm.base64.js
          export const wasmBs64 = "$(base64 -w0 pkg/aquamarine_client_bg.wasm)";
          EOF

    ### Generate index files so import works as: | import {wasmBs64} from "@fluencelabs/aquamarine-stepper"; |
      - name: Generate index.js & index.d.ts
        run: |
          cat << EOF > index.js
          export * from "./aquamarine.wasm.base64.js";
          EOF

          cp index.js index.d.ts
        working-directory: pkg

      - name: Generate aquamarine.wasm.base64.d.ts
        run: |
          cat << EOF > aquamarine.wasm.base64.d.ts
          export const wasmBs64: string;
          EOF
        working-directory: pkg

      - name: Prepare package.json for publishing
        run: |
          cat pkg/package.json | jq --arg name aquamarine.wasm.base64.js \
            '. + {
              files: [ "aquamarine.wasm.base64.js", "aquamarine.wasm.base64.d.ts",  "index.js", "index.d.ts" ],
              "name": "@fluencelabs/aquamarine-stepper-${{ env.BRANCH_NAME }}",
              "description": "Aquamarine IR interpreter as base64 WASM",
              "main": "index.js",
              "repository": "https://github.com/fluencelabs/aquamarine",
              "author": "Fluence Labs",
              "license": "Apache 2.0",
              "private": false,
              "main": "index.js",
              "types": "index.d.ts"
            }' > pkg/package_new.json

          cat pkg/package_new.json
          mv pkg/package_new.json pkg/package.json

      - run: cat pkg/package.json

    ### Set default version
      - run: yarn version --new-version 0.0.0 --no-git-tag-version
        working-directory: pkg

    ### Set version to MAX_VERSION
      - run: yarn version --new-version $MAX_VERSION --no-git-tag-version || true
        working-directory: pkg

    ### Increment patch component of the version
      - run: yarn version --patch --no-git-tag-version
        working-directory: pkg

      ### Add README so it appears on npmjs.org
      - run: |
          cat <<EOF > README.md
          # Aquamarine IR interpreter as base64 WASM
          Built from branch ${{ env.BRANCH_NAME }}
          EOF
        working-directory: pkg

    ### Publish to NPM registry
      - uses: actions/setup-node@v1
        with:
          node-version: '15'
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish --access public
        working-directory: pkg
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


### === Rust package release ===
      - name: Build aquamarine.wasm for node
        run: fce build --release -p aquamarine
        working-directory: stepper

