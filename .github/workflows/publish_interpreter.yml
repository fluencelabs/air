# run locally like this:
# act -b -P ubuntu-latest=nektos/act-environments-ubuntu:18.04 -j publish-interpreter -s "NPM_TOKEN=uuid-uuid-uuid-uuid"

name: "publish-interpreter"

on:
  push:
    branches:
      - "master"

jobs:
  npm-publish:
    name: "Publish Aquamarine to NPM & crates.io"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

### Prepare cargo & toolchains
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain with wasm32-unknown-unknown
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - name: Install wasm32-wasi
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi
          profile: minimal
      - uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: update
          args: --aggressive

### Calculate FINAL_VERSION
      - name: Install jq & sponge
        run: sudo apt-get update && sudo apt-get --yes --force-yes install jq moreutils

      - name: Install cargo-show
        run: cargo install cargo-show || true

      - name: Get versions from npm & crates.io, and take the highest one
        run: |
          # install semver and add it to PATH
          yarn global add semver
          PATH="$(yarn global bin):$PATH"

          CARGO_TOML="crates/air-interpreter-wasm/Cargo.toml"
          # get package name from Cargo.toml
          RS_PKG_NAME="$(toml get "$CARGO_TOML" package.name | tr -d \")"
          JS_PKG_NAME="@fluencelabs/aquamarine-stepper"

          # get version from Cargo.toml
          LOCAL_RUST_VERSION="$(toml get "$CARGO_TOML" package.version | tr -d \")"

          # get & increment version from NPM
          JS_VERSION="$(yarn info --silent "$JS_PKG_NAME" version || true)"
          NEXT_JS_VERSION="$(semver --increment patch "$JS_VERSION" || true)"

          # get & increment version from crates.io
          RS_VERSION="$((cargo show --json "$RS_PKG_NAME" | jq -r .crate.max_version) 2>/dev/null || true)"
          NEXT_RS_VERSION="$(semver --increment patch "$RS_VERSION" || true)"

          # take the highest version
          MAX_VERSION="$(semver "$NEXT_JS_VERSION" "$NEXT_RS_VERSION" "$LOCAL_RUST_VERSION" | tail -n1)"

          echo "FINAL_VERSION=$MAX_VERSION" | tee -a $GITHUB_ENV
          echo "PKG_NAME=$PKG_NAME" | tee -a $GITHUB_ENV
          echo "JS_PKG_NAME=$JS_PKG_NAME" | tee -a $GITHUB_ENV

### === JavaScript package release ===
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        continue-on-error: true

      - name: Build aquamarine.wasm for JS clients
        run: wasm-pack build $GITHUB_WORKSPACE/stepper --no-typescript --release -d $(pwd)/pkg

      - name: Generate aquamarine.wasm.base64.js
        run: |
          cat << EOF > pkg/aquamarine.wasm.base64.js
          export const wasmBs64 = "$(base64 -w0 pkg/aquamarine_client_bg.wasm)";
          EOF

    ### Generate index files so import works as: | import {wasmBs64} from "@fluencelabs/aquamarine-stepper"; |
      - name: Generate index.js & index.d.ts
        run: |
          cat << EOF > index.js
          export * from "./aquamarine.wasm.base64.js";
          EOF

          cp index.js index.d.ts
        working-directory: pkg

      - name: Generate aquamarine.wasm.base64.d.ts
        run: |
          cat << EOF > aquamarine.wasm.base64.d.ts
          export const wasmBs64: string;
          EOF
        working-directory: pkg

      - name: Prepare package.json for publishing
        run: |
          cat pkg/package.json | jq --arg name aquamarine.wasm.base64.js \
            '. + {
              files: [ "aquamarine.wasm.base64.js", "aquamarine.wasm.base64.d.ts",  "index.js", "index.d.ts" ],
              "name": "${{ env.JS_PKG_NAME }}",
              "description": "Aquamarine IR interpreter as base64 WASM",
              "main": "index.js",
              "repository": "https://github.com/fluencelabs/aquamarine",
              "author": "Fluence Labs",
              "license": "Apache 2.0",
              "private": false,
              "main": "index.js",
              "types": "index.d.ts"
            }' > pkg/package_new.json

             cat pkg/package_new.json
             mv pkg/package_new.json pkg/package.json

    ### Set version
      - name: Set version to ${{ env.FINAL_VERSION }}
        run: yarn version --new-version ${{ env.FINAL_VERSION }} --no-git-tag-version
        working-directory: pkg

    ### Add README so it appears on npmjs.org
      - run: |
          cat <<EOF > README.md
          # Aquamarine IR interpreter as base64 WASM
          EOF
        working-directory: pkg

      ### Publish to NPM registry
      - uses: actions/setup-node@v1
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'

      - run: npm publish --access public
        working-directory: pkg
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

### === Rust package release ===
      - name: Install fcli toml-cli
        run: cargo install fcli toml-cli || true

      - name: Build aquamarine.wasm for node
        run: fce build --release -p aquamarine --features fce
        working-directory: stepper

      - name: Copy aquamarine.wasm to air-interpreter-wasm
        run: cp target/wasm32-wasi/release/aquamarine.wasm crates/air-interpreter-wasm/aquamarine.wasm

      - name: Set project name@version to ${{ env.PKG_NAME }}@${{ env.FINAL_VERSION }}
        run: |
          PATH="~/.cargo/bin:$PATH"
          toml set Cargo.toml package.version "${{ env.FINAL_VERSION }}" | sponge Cargo.toml

          NAME=$(toml get Cargo.toml package.name | jq -r .)
          toml set Cargo.toml package.name "${{ env.PKG_NAME }}" | sponge Cargo.toml
        working-directory: crates/air-interpreter-wasm

      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --allow-dirty
        working-directory: crates/air-interpreter-wasm

### Create a pre-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.FINAL_VERSION }}
          release_name: Fluence Network ${{ env.FINAL_VERSION }}
          body: |
            - [${{ env.FINAL_VERSION }} @ NPM registry](https://www.npmjs.com/package/${{ env.JS_PKG_NAME }}/v/${{ env.FINAL_VERSION }})
            - [${{ env.FINAL_VERSION }} @ crates.io](https://crates.io/crates/${{ env.PKG_NAME }}/${{ env.FINAL_VERSION }})
          draft: false
          prerelease: false
